
//*************************************************************************************************
//
// Общий файл с объявлениями структур хранения параметров уст-в для обмена по CAN шине
//
//*************************************************************************************************

#ifndef __CAN_DATA_H
#define __CAN_DATA_H

#include <stdint.h>
#include <stdbool.h>

#include "dev_data.h"
#include "can_data.h"

//Управление блоком АВР
typedef enum {
    CAN_ALT_DC,                             //переход на инвертора
    CAN_ALT_AC                              //переход на основную сеть
 } CanCtrlAlt;

//Управление генератором
typedef enum {
    CAN_GEN_STOP,                           //выключение генератора
    CAN_GEN_START,                          //запуск генератора
    CAN_GEN_TEST                            //тестовый запуск генератора
 } CanCtrlGen;

//Маски управления солнечными панелями
#define CAN_PV_CTRL         0x01            //Управление подключением/отключением солнечных панелей к контроллеру MPPT
#define CAN_PV_MODE         0x02            //Устанавливает режим соединения панелей

//Маски управления голосовым/звуковым информированием
#define CAN_VOICE           0x01            //Формируем список воспроизведения для голосового информатора
#define CAN_VOLUME          0x02            //Установка громкости воспроизведения сообщений голосовым информатором
#define CAN_SOUND           0x04            //Воспроизведении звукового сообщения

//Маски управления трекером
typedef enum {
    CAN_TRC_POWER,                          //Управление реле питания актуаторов трекера
    CAN_TRC_POS,                            //Управление позиционированием трекера
    CAN_TRC_STOP,                           //Прервать позиционирование
    CAN_TRC_CMD,                            //Переход в командный режим
    CAN_TRC_INT,                            //Позиционирование по солнечному сенсору 
    CAN_TRC_INIT,                           //Инициалзация контроллера трекера
    CAN_TRC_SAVE,                           //Сохранить текущие значения позиционирования в EEPROM контроллера трекера
    CAN_TRC_REST,                           //Восстановить значения позиционирования из EEPROM контроллера трекера
    CAN_TRC_RESET                           //Перезапуск контроллера трекера
 } TrackerCtrl;

#define CAN_DATA_MBUS_MIN   8               //минимальный размер пакета с ответом на запрос MODBUS

#define CAN_DATA_MAX        8               //максимальный размер данных в одном пакете

//*************************************************************************************************
// Функции управления
//*************************************************************************************************
void DevDataSend( uint32_t dev_id );

#pragma pack( push, 1 )

//*************************************************************************************************
// Структуры для передачи команд управления от HMI
//*************************************************************************************************
//Структура команд управления солнечными панелями
typedef struct {
    uint8_t         mask;
    PvCtrl          ctrl;
    PvMode          mode;
 } CAN_PV;

//Структура управления голосовым/звуковым информированием
typedef struct {
    uint8_t         ctrl;
    VoiceId         voice;
    Volume          volume;
    SoundId         sound;
 } CAN_INFO;

//Структура управления дополнительными выходами
typedef struct {
    RelayRes        relay;
    RelayCmnd       mode;
 } CAN_RELAY;

typedef struct {
    RelayOut        relay;
    RelayCmnd       mode;
 } CAN_EXT;

//Структура управления трекером
typedef struct {
    TrackerCtrl     ctrl;
    PowerAct        power_act;
    TrackerAct      type_act;
    TrackerPos      type_value;
    float           value;
 } CAN_TRC;

//Структура команды для отправки по MODBUS
typedef struct {
    uint8_t         length;                 //общая длина данных со всеми полями
    ModBusError     answer;                 //ответ на запрос
    uint8_t         dev_addr;               //Адрес устройства
    uint8_t         function;               //Функциональный код
    uint16_t        addr_reg;               //Адрес первого регистра HI/LO байт
    uint16_t        cnt_reg;                //Количество регистров HI/LO байт
    uint16_t        mbus_data[16];
 } CAN_MODBUS;

//*************************************************************************************************
// Структуры для передачи значений параметров монитора АКБ
//*************************************************************************************************
typedef struct {
    LinkConn        link : 1;               //Связь установлена
    unsigned        alarm : 1;              //ON/OFF состояние сигнала
    unsigned        relay : 1;              //ON/OFF состояние реле
    unsigned        alarm_mode : 5;         //LV-1, HV-2, LSOC-4, LSV-8, HSV-16 режим сигнализации
    int16_t         ttg;                    //(min) время работы до перезарядки
    uint16_t        h4;                     //число циклов заряда
    uint16_t        h5;                     //число полных разрядов
 } CAN_BATMON1;

typedef struct {
    float           voltage;                //(V) напряжение АКБ
    float           current;                //(A) ток АКБ
 } CAN_BATMON2;

typedef struct {
    float           cons_energy;            //(Ah) израсходованная энергия от АКБ
    float           soc;                    //(%) состояние заряда
 } CAN_BATMON3;

typedef struct {
    float           h1;                     //(Ah) глубина самого глубокого разряда
    float           h2;                     //(Ah) глубина последнего разряда
 } CAN_BATMON4;

typedef struct {
    float           h3;                     //(Ah) глубина среднего разряда
    float           h6;                     //(Ah) совокупное значение Ah полученное от АКБ
 } CAN_BATMON5;

typedef struct {
    float           h7;                     //(V) минимальное напряжение АКБ
    float           h8;                     //(V) максимальное напряжение АКБ
 } CAN_BATMON6;

typedef struct {
    uint16_t        h9;                     //число дней с момента последнего полного заряда
    uint16_t        h11;                    //Кол-во аварийных сигналов низкого напряжения
} CAN_BATMON7;

//*************************************************************************************************
// Структура для передачи значений параметров контроллера заряда MPPT
//*************************************************************************************************
typedef struct {
    MpptPower       power : 1;              //контроллер включен
    MpptConn        connect : 1;            //кабель связи подключен
    LinkConn        link : 1;               //данные обновляются
    PvStatus        pv_stat : 1;            //панели вкл
    PvMode          pv_mode : 1;            //режим панелей
    MpptCharge      u08_charge_mode;        //режим зарядки
    uint8_t         u12_soc;                //(%) уровень заряда АКБ
    uint16_t        u07_time_flt;           //(min) время контроллера в режиме "поддержки" сегодня
    uint16_t        time_charge;            //счетчик времени заряда (сколько идет заряд)
 } CAN_MPPT1;

typedef struct {
    float           u01_in_voltage;         //(V) напряжение панелей
    float           u02_in_current;         //(A) ток панелей
 } CAN_MPPT2;

typedef struct {
    float           u03_out_voltage;        //(V) выходное напряжение
    float           u04_out_current;        //(A) выходной ток
 } CAN_MPPT3;

typedef struct {
    float           u13_bat_current;        //(A) ток АКБ
 } CAN_MPPT4;

typedef struct {
    uint32_t        u05_energy1;            //(WHr) собранная энергия сегодня
    uint32_t        u05_energy2;            //(AHr) собранная энергия сегодня
 } CAN_MPPT5;

typedef struct {
    float           u15_bat_temp;           //(С) температура АКБ
    float           u11_mppt_temp;          //(С) температура контроллера
 } CAN_MPPT6;

//*************************************************************************************************
// Структура для передачи значений параметров контроллера заряда PB-1000-224
//*************************************************************************************************
typedef struct {
    PowerAc         connect_ac : 1;         //уст-во подключено к сети AC
    DevStatus       device_ok : 1;          //признак исправности уст-ва
    unsigned        charge_end : 1;         //зарядка завершена
    ChargeMode      charge_mode : 2;        //текущий режим зарядки "выкл/2/3/8"
    ComndStat       charge_exec : 1;        //выполнение команды
    float           current;                //ток зарядки
    ChargeError     error;                  //ошибки контроллера заряда
 } CAN_CHARGER1;

//*************************************************************************************************
// Структура для передачи значений параметров инверторов
//*************************************************************************************************
typedef struct {
    InvDcStatus     dc_conn : 1;            //инвертор подключен к АКБ
    InvStatus       mode : 3;               //текущий режим инвертора (формируется по маскам состояния)
    InvCtrlCycle    cycle_step : 4;         //шаги выполнения циклограммы вкл/выкл 
    InvCtrlError    ctrl_error;             //ошибки управления инвертором
    uint8_t         dev_error;              //текущие ошибки инвертора
    uint16_t        ac_out;                 //напряжение на выходе
    uint16_t        power_watt;             //мощность на выходе W (расcчитывается из power_perc)
    uint8_t         power_perc;             //мощность потребляемая нагрузкой 0-100%
 } CAN_INV1;

typedef struct {
    float           dc_in;                  //напряжение АКБ
    float           temperature;            //температура инвертора
 } CAN_INV2;

//*************************************************************************************************
// Структура для передачи значений параметров генератора
//*************************************************************************************************
typedef struct {
    LinkConn        remote : 1;             //признак подключения генератора по RS-485 (MODBUS)
    LinkConn        connect : 1;            //признак подключения генератора
    GenAutoMode     auto_mode : 1;          //ручной/автоматический запуск
    GenMode         mode : 4;               //режим работы генератора
    GenStat         stat : 4;               //текущее состояние режима (в т.ч. ошибки) см. GEN_MSG_*
    unsigned        cycle1 : 4;             //текущий цикл запуска
    unsigned        cycle2 : 4;             //всего циклов запуска
    GenError        error;                  //код ошибки генератора
    uint16_t        timer_run_inc;          //время работы
    uint16_t        timer_run_dec;          //время до выключения генератора
 } CAN_GEN1;

typedef struct {
    uint16_t        timer_lost_acmain;      //время до начала запуска при отключении основной сети
    uint16_t        timer_rest_acmain;      //время до выключения генератора при восстановлении основной сети
    uint16_t        timer_sleep;            //время до окончания отдыха
 } CAN_GEN2;

//*************************************************************************************************
// Структура для передачи значений параметров трекера
//*************************************************************************************************
typedef struct {
    LinkConn        link : 1;               //признак связи по протоколу MODBUS
    Power           pwr_trc : 1;            //общее питание трекера включено
    PowerAct        pwr_act : 1;            //питание реле управления актуаторами включено
    Protect         pwr_fuse : 1;           //сработала защита питание трекера 
    uint16_t        stat;                   //текущее состояние трекера (все входы и режимы)
                                            // 0x000Х - источник сброса контроллера
                                            // 0x00X0 - концевые выключатели актуаторов
                                            // 0x0Х00 - состояния солнечного сенсор
                                            // 0xХ000 - дополнительные входы управления
    uint16_t        time_on;                //таймер продолжительности работы контроллер с момента вкл/перезагрузки
 } CAN_TRC1;

typedef struct {
    uint16_t        act_pos_vert;           //абсолютное значение положения актуатора (мм)
    uint16_t        act_pos_horz;           //абсолютное значение положения актуатора (мм)
    uint16_t        act_vert_eep;           //сохраненное значение положения верт. актуатора в EEPROM (импульс)
    uint16_t        act_horz_eep;           //сохраненное значение положения горз. актуатора в EEPROM (импульс)
 } CAN_TRC2;

//*************************************************************************************************
// Структура для передачи значений параметров положения солнца
//*************************************************************************************************
typedef struct {
    float           sunrise;                //восход
    float           sunset;                 //заход
 } CAN_SPA1;

typedef struct {
    float           zenith;                 //зенитный угол
    float           azimuth;                //азимутальный угол
 } CAN_SPA2;

typedef struct {
    float           duration;               //продолжительность дня
    SpaValid        error;                  //проверка исходных данных
 } CAN_SPA3;

//*************************************************************************************************
// Структуры для передачи значений параметров конфигураций
//*************************************************************************************************
typedef struct {
    char            scr_file[8];            //имя файла экрана с макроподстановками
 } CAN_CONFIG1;

typedef struct {
    char            scr_file[8];            //имя файла экрана с макроподстановками
 } CAN_CONFIG2;

typedef struct {
    char            job_file[8];            //имя файла загружаемых заданий для планировщика
 } CAN_CONFIG3;

typedef struct {
    char            job_file[8];            //имя файла загружаемых заданий для планировщика
 } CAN_CONFIG4;

typedef struct {
    char            job_test[8];            //имя файла загружаемых заданий для планировщика
 } CAN_CONFIG5;

typedef struct {
    char            job_test[8];            //имя файла загружаемых заданий для планировщика
 } CAN_CONFIG6;

typedef struct {
    unsigned        mode_sys : 4;           //режим работы системы
    unsigned        log_enable_pv : 1;      //вкл логирование команд управление солнечными панелями
    unsigned        log_enable_chrg : 1;    //вкл логирование команд зарядного уст-ва
    unsigned        log_enable_mppt : 1;    //вкл логирование команд/данных вкл/выкл солнечных панелей
    unsigned        log_enable_inv : 1;     //вкл логирование команд/данных управление инверторов
    unsigned        log_enable_bmon : 1;    //вкл логирование данных монитора батареи
    unsigned        log_enable_gen : 1;     //вкл логирование команд генератора
    unsigned        log_enable_alt : 1;     //вкл логирование команд блока АВР
    unsigned        log_enable_trc : 1;     //вкл логирование команд трекера
    unsigned        mode_logging : 1;       //режим логирования файлов 0 - \каталог\файл, 1 - \каталог\YYYYMM\файл
    unsigned        gen_auto_mode : 1;      //ручной/автоматический режим запуска при отключении сети
    unsigned        log_enable1 : 1;
    unsigned        log_enable2 : 1;
    uint8_t         pb_current_stop;        //минимальный ток при котором происходит выключении зарядки от PB-1000-224
                                            //если = 0, выключение происходит по сигналу "BANK-A OK"
    uint16_t        delay_start_inv;        //таймер задержки вкл инверторов при отключении основной сети
    uint16_t        delay_stop_inv;         //таймер задержки выкл инверторов после восстановлении основной сети
 } CAN_CONFIG7;

typedef struct {
    DATE            last_charge;            //дата последного включения подзарядки от основной сети
    uint16_t        datlog_upd_pb;          //период записи данных зарядного уст-ва
    uint16_t        datlog_upd_mppt;        //период записи данных солнечного контроллера заряда
 } CAN_CONFIG8;

typedef struct {
    uint16_t        datlog_upd_bmon;        //период записи данных монитора батареи
    uint16_t        datlog_upd_ts;          //период записи данных инверторов
    uint16_t        datlog_upd_trc;         //период записи данных трекера
    uint16_t        gen_time_run;           //#21600 максимальная продолжительность работы генератора (сек)
 } CAN_CONFIG9;

typedef struct {
    uint16_t        gen_delay_start;        //задержка запуска генератора после отключения основной сети (сек)
    uint16_t        gen_delay_stop;         //задержка выключения генератора после восстановления основной сети (сек)
    unsigned        gen_cnt_start : 4;      //кол-во попыток запуска генератора (макс - 8)
    unsigned        gen_delay_chk_run : 4;  //ожидание сигнала запуска генератора (сек)
    uint8_t         gen_before_start;       //пауза между запусками (сек) фактическое значение before_start = delay_check_run + before_start
    uint16_t        gen_time_sleep;         //#7200 продолжительность паузы между длительными работами (сек)
 } CAN_CONFIG10;

typedef struct {
    uint8_t         gen_time_start[8];      //продолжительность запуска для каждой попытки (макс - 8)
 } CAN_CONFIG11;

typedef struct {
    uint16_t        gen_time_test;          //#600 продолжительность тестирования генератора (сек)
    DATE            gen_last_run;           //дата последнего включения генератора
    int8_t          spa_timezone;           //часовой пояс
    uint8_t         spa_temperature;        //Среднегодовая местная температура
 } CAN_CONFIG12;

typedef struct {
    uint16_t        spa_elevation;          //Высота наблюдателя
    uint16_t        spa_pressure;           //Среднегодовое местное давление
    uint16_t        spa_slope;              //Наклон поверхности (измеряется от горизонтальной плоскости)
    uint16_t        spa_azm_rotation;       //Вращение поверхности азимут (измеряется с юга на проекции нормали
 } CAN_CONFIG13;

typedef struct {
    double          spa_latitude;           //Широта наблюдателя
 } CAN_CONFIG14;

typedef struct {
    double          spa_longitude;          //Долгота наблюдателя
 } CAN_CONFIG15;

#pragma pack( pop )

#endif

