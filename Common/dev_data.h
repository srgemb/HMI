
//*************************************************************************************************
//
// Общий файл с объявлениями структур для хранения параметров уст-в
//
//*************************************************************************************************

#ifndef __DEV_DATA_H
#define __DEV_DATA_H

#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include "device.h"

#pragma pack( push, 1 )

//*************************************************************************************************
// Структура для хранения значений входов
//*************************************************************************************************
typedef struct {
    unsigned        fuse_24vdc : 1;         //наличие питания контроллера по цепи +24V
    unsigned        bat_connect: 1;         //состояние автомата подключения АКБ
    unsigned        stat_ctrl  : 1;         //наличия питания +12BAT от схемы управления контакторами
    unsigned        cpu_mode   : 2;         //состояние переключателей MODE
    uint32_t        state;                  //состояние всех входов
 } PORTS;

//*************************************************************************************************
// Структура для хранения данных RTC (часов реального времени)
//*************************************************************************************************
typedef struct {
    uint8_t         day;                    //день
    uint8_t         month;                  //месяц
    uint16_t        year;                   //год
    uint8_t         dow;                    //день недели
    uint8_t         hour;                   //часы
    uint8_t         min;                    //минуты
    uint8_t         sec;                    //секунды
 } RTC;

//*************************************************************************************************
// Структура для хранения значений параметров монитора АКБ
//*************************************************************************************************
typedef struct {
    LinkConn        link : 1;               //Связь установлена
    unsigned        alarm : 1;              //ON/OFF состояние сигнала
    unsigned        relay : 1;              //ON/OFF состояние реле
    unsigned        alarm_mode : 5;         //LV-1, HV-2, LSOC-4, LSV-8, HSV-16 режим сигнализации
    float           voltage;                //(V) напряжение АКБ
    float           current;                //(A) ток АКБ
    float           cons_energy;            //(Ah) израсходованная энергия от АКБ
    float           soc;                    //(%) состояние заряда
    int16_t         ttg;                    //(min) время работы до перезарядки
    float           h1;                     //(Ah) глубина самого глубокого разряда
    float           h2;                     //(Ah) глубина последнего разряда
    float           h3;                     //(Ah) глубина среднего разряда
    uint16_t        h4;                     //число циклов заряда, < 65% до > 90%
    uint16_t        h5;                     //число полных разрядов
    float           h6;                     //(Ah) совокупное значение Ah полученное от АКБ
    float           h7;                     //(V) минимальное напряжение АКБ
    float           h8;                     //(V) максимальное напряжение АКБ
    uint16_t        h9;                     //число дней с момента последнего полного заряда
    uint16_t        h10;                    //Кол-во автоматических синхронизаций BMV
    uint16_t        h11;                    //Кол-во аварийных сигналов низкого напряжения
    uint16_t        h12;                    //Кол-во аварийных сигналов высокого напряжения
    char            model[10];              //модель монитора
    char            version[10];            //версия прошивки
 } BATMON;

//*************************************************************************************************
// Структура для хранения значений параметров контроллера заряда MPPT
//*************************************************************************************************
typedef struct {
    MpptPower       power : 1;              //контроллер включен
    MpptConn        connect : 1;            //кабель связи подключен
    LinkConn        link : 1;               //данные обновляются
    PvStatus        pv_stat : 1;            //панели вкл
    PvMode          pv_mode : 1;            //режим панелей
    float           u01_in_voltage;         //(V) напряжение панелей
    float           u02_in_current;         //(A) ток панелей
    float           u03_out_voltage;        //(V) выходное напряжение
    float           u04_out_current;        //(A) выходной ток
    uint32_t        u05_energy1;            //(WHr) собранная энергия сегодня
    uint32_t        u05_energy2;            //(AHr) собранная энергия сегодня
    uint16_t        u07_time_flt;           //(min) время контроллера в режиме "поддержки" сегодня
    MpptCharge      u08_charge_mode;        //режим зарядки
    float           u11_mppt_temp;          //(С) температура контроллера
    uint8_t         u12_soc;                //(%) уровень заряда АКБ
    float           u13_bat_current;        //(A) ток АКБ
    uint16_t        u14_bat_capasity;       //(AHr) емкость АКБ
    float           u15_bat_temp;           //(С) температура АКБ
    uint16_t        u17_serial;             //серийный номер контроллера
    uint16_t        time_charge;            //счетчик времени заряда (сколько идет заряд)
 } MPPT;

//*************************************************************************************************
// Структура для хранения значений параметров блока АВР
//*************************************************************************************************
typedef struct {
    LinkConn        connect : 1;            //АВР подключен да/нет
    PowerAc         main_ac : 1;            //наличие основной сети да/нет
    PowerAc         gen_on  : 1;            //на АВР подается напряжение от генератора да/нет
    AltPower        power   : 2;            //источник питания нагрузки
    uint16_t        timer_delay;            //таймер задержки вкл/выкл инверторов при отключении сети
 } ALT;

//*************************************************************************************************
// Структура для хранения значений параметров контроллера заряда PB-1000-224
//*************************************************************************************************
typedef struct {
    PowerAc         connect_ac : 1;         //уст-во подключено к сети AC
    DevStatus       device_ok : 1;          //признак исправности уст-ва
    ChargeCompl     charge_end : 1;         //зарядка завершена
    ChargeMode      charge_mode : 2;        //текущий режим зарядки "выкл/2/3/8"
    ComndStat       charge_exec : 1;        //выполнение команды
    float           current;                //ток зарядки
    ChargeError     error;                  //ошибки контроллера заряда
 } CHARGER;

//*************************************************************************************************
// Структура для хранения значений параметров инверторов
//*************************************************************************************************
typedef struct {
    InvDcStatus     dc_conn : 1;            //инвертор подключен к АКБ
    InvStatus       mode : 3;               //текущий режим инвертора (формируется по маскам состояния)
    InvCtrlCycle    cycle_step : 4;         //шаги выполнения циклограммы вкл/выкл 
    unsigned        act_config : 1;         //данные конфигурации актуальны
    unsigned        act_status : 1;         //данные статуса актуальны
    InvCtrlError    ctrl_error;             //ошибки управления инвертором
    //параметры EEPROM (конфигурация)
    float           cfg_eql_volt;           //напряжение выравнивания
    float           cfg_flt_volt;           //напряжение поддержания
    float           cfg_alarm_volt;         //пониженное напряжение
    float           cfg_shdn_volt;          //напряжение выключения
    char            vendor[15];             //производитель
    char            version[15];            //версия
    char            model[20];              //модель
    //параметры статуса
    uint16_t        ac_out;                 //напряжение на выходе
    uint8_t         ac_power;               //выходная мощность в % единицах (0-25-50-75-100)
    float           dc_in;                  //напряжение АКБ
    uint8_t         bat_perc;               //уровень зарядки АКБ % (0-25-50-75-100)
    float           temperature;            //температура инвертора
    uint16_t        unused;                 //???
    float           ac_freq;                //частота напряжения на выходе
    uint16_t        work_time;              //прогнозируемое время работы min ???
    uint8_t         power_perc;             //мощность потребляемая нагрузкой 0-100%
    uint16_t        power_watt;             //мощность на выходе W (рассчитывается из power_perc)
    uint32_t        bit_status;             //биты состояния инвертора
    uint8_t         dev_error;              //текущие ошибки инвертора
 } INVERTER;

//*************************************************************************************************
// Cтруктура для хранения значений параметров генератора
//*************************************************************************************************
typedef struct {
    LinkConn        remote : 1;             //признак подключения генератора по RS-485 (MODBUS)
    LinkConn        connect : 1;            //признак подключения генератора
    GenAutoMode     auto_mode : 1;          //ручной/автоматический запуск
    GenMode         mode : 4;               //режим работы генератора
    GenStat         stat : 4;               //текущее состояние режима (в т.ч. ошибки) см. GEN_MSG_*
    unsigned        cycle1 : 4;             //текущий цикл запуска
    unsigned        cycle2 : 4;             //всего циклов запуска
    uint16_t        timer_run_inc;          //время работы
    uint16_t        timer_run_dec;          //время до выключения генератора
    uint16_t        timer_lost_acmain;      //время до начала запуска при отключении основной сети
    uint16_t        timer_rest_acmain;      //время до выключения генератора при восстановлении основной сети
    uint16_t        timer_sleep;            //время до окончания отдыха
    GenError        error;                  //код ошибки генератора
 } GEN;

//*************************************************************************************************
// Структура для хранения данных положения солнца
//*************************************************************************************************
typedef struct {
    float           sunrise;                //восход
    float           sunset;                 //заход
    float           zenith;                 //зенитный угол
    float           azimuth;                //азимутальный угол
    float           duration;               //продолжительность дня
    SpaValid        error;                  //проверка исходных данных
 } SUNPOS;

//*************************************************************************************************
// Структура для хранения данных параметров трекера
//*************************************************************************************************
typedef struct {
    LinkConn        link : 1;               //признак связи по протоколу MODBUS
    Power           pwr_trc : 1;            //общее питание трекера включено
    PowerAct        pwr_act : 1;            //питание реле управления актуаторами включено
    Protect         pwr_fuse : 1;           //сработала защита питание трекера 
    uint16_t        stat;                   //текущее состояние трекера (все входы и режимы)
                                            // 0x000Х - источник сброса контроллера
                                            // 0x00X0 - концевые выключатели актуаторов
                                            // 0x0Х00 - состояния солнечного сенсор
                                            // 0xХ000 - дополнительные входы управления
    uint16_t        act_pos_vert;           //абсолютное значение положения актуатора (мм)
    uint16_t        act_pos_horz;           //абсолютное значение положения актуатора (мм)
    uint16_t        act_vert_eep;           //сохраненное значение положения верт. актуатора в EEPROM (импульс)
    uint16_t        act_horz_eep;           //сохраненное значение положения горз. актуатора в EEPROM (импульс)
    uint16_t        time_on;                //таймер продолжительности работы контроллер с момента вкл/перезагрузки
 } TRACKER;

//*************************************************************************************************
// Структура для хранения данных параметров голосового информатора
//*************************************************************************************************
typedef struct {
    LinkConn        link : 1;               //уст-во подключено
    unsigned        stat : 4;               //состояние ус-ва (источник сброса)
    Volume          volume : 4;             //текущий уровень громкости воспроизведения
 } VOICE;

//*************************************************************************************************
// Структура для хранения значений типа "дата"
//*************************************************************************************************
typedef struct {
    uint8_t         day;                    //день
    uint8_t         month;                  //месяц
    uint16_t        year;                   //год
 } DATE;

//*************************************************************************************************
// Структура для хранения общих параметров системы
//*************************************************************************************************
typedef struct {
    //основные параметры
    char            scr_file[16];           //имя файла экрана с макроподстановками
    char            job_file[16];           //имя файла загружаемых заданий для планировщика
    char            job_test[16];           //имя файла загружаемых заданий для планировщика
    unsigned        mode_sys : 4;           //режим работы системы
    //разрешения ведения логирования событий
    unsigned        log_enable_pv : 1;      //вкл логирование команд управление солнечными панелями
    unsigned        log_enable_chrg : 1;    //вкл логирование команд зарядного уст-ва
    unsigned        log_enable_mppt : 1;    //вкл логирование команд/данных вкл/выкл солнечных панелей
    unsigned        log_enable_inv : 1;     //вкл логирование команд/данных управление инверторов
    unsigned        log_enable_bmon : 1;    //вкл логирование данных монитора батареи
    unsigned        log_enable_gen : 1;     //вкл логирование команд генератора
    unsigned        log_enable_alt : 1;     //вкл логирование команд блока АВР
    unsigned        log_enable_trc : 1;     //вкл логирование команд трекера
    unsigned        mode_logging : 1;       //режим логирования файлов 0 - \каталог\файл, 1 - \каталог\YYYYMM\файл
    unsigned        gen_auto_mode : 1;      //ручной/автоматический режим запуска при отключении сети
    unsigned        log_enable1 : 1;        //резерв
    unsigned        log_enable2 : 1;        //резерв
    uint8_t         pb_current_stop;        //минимальный ток при котором происходит выключение зарядки от PB-1000-224
                                            //если = 0, выключение происходит по сигналу "BANK-A OK"
    uint16_t        delay_start_inv;        //таймер задержки вкл инверторов при отключении основной сети
    uint16_t        delay_stop_inv;         //таймер задержки выкл инверторов после восстановлении основной сети
    DATE            last_charge;            //дата последнего включения подзарядки от основной сети
    //интервалы записи данных в лог файлы (сек)
    uint16_t        datlog_upd_chrg;        //период записи данных зарядного уст-ва
    uint16_t        datlog_upd_mppt;        //период записи данных солнечного контроллера заряда
    uint16_t        datlog_upd_bmon;        //период записи данных монитора батареи
    uint16_t        datlog_upd_inv;         //период записи данных инверторов
    uint16_t        datlog_upd_trc;         //период записи данных трекера
    //параметры генератора
    uint16_t        gen_delay_start;        //задержка запуска генератора после отключения основной сети (сек)
    uint16_t        gen_delay_stop;         //задержка выключения генератора после восстановления основной сети (сек)
    unsigned        gen_cnt_start : 4;      //кол-во попыток запуска генертора (макс - 8)
    unsigned        gen_delay_chk_run : 4;  //ожидание сигнала запуска генератора (сек)
    uint8_t         gen_before_start;       //пауза между запусками (сек) фактическое значение before_start = delay_check_run + before_start
    uint8_t         gen_time_start[8];      //продолжительность запуска для каждой попытки (макс - 8)
    uint16_t        gen_time_run;           //#21600 максимальная продолжительность работы генератора (сек)
    uint16_t        gen_time_sleep;         //#7200 продолжительность паузы между длительными работами (сек)
    uint16_t        gen_time_test;          //#600 продолжительность тестирования генератора (сек)
    DATE            gen_last_run;           //дата последнего включения генератора
    //параметры расчета восхода/захода солнца
    int8_t          spa_timezone;           //часовой пояс
    uint16_t        spa_elevation;          //Высота наблюдателя
    uint16_t        spa_pressure;           //Среднегодовое местное давление
    uint8_t         spa_temperature;        //Среднегодовая местная температура
    uint16_t        spa_slope;              //Наклон поверхности (измеряется от горизонтальной плоскости)
    uint16_t        spa_azm_rotation;       //Вращение поверхности азимут (измеряется с юга на проекции нормали 
                                            //к поверхности на горизонтальной плоскости, отрицательный восток)
    double          spa_latitude;           //Широта наблюдателя
    double          spa_longitude;          //Долгота наблюдателя
 } CONFIG;

#pragma pack( pop )

extern PORTS        ports;
extern ALT          alt;
extern MPPT         mppt;
extern CHARGER      charger;
extern BATMON       batmon;
extern INVERTER     inv1, inv2;
extern GEN          *gen_ptr;
extern SUNPOS       sunpos;
extern RTC          rtc;
extern TRACKER      tracker;
extern VOICE        voice;
extern CONFIG       config;

#endif

