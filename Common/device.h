
//*************************************************************************************************
//
// Общий файл с константами.
// Перечень устройств и их параметров.
//
//*************************************************************************************************

#ifndef __DEVICE_H
#define __DEVICE_H

//*************************************************************************************************
// Идентификаторы уст-в
//*************************************************************************************************
typedef enum {
    ID_DEV_NULL,
    ID_DEV_PORTS,                           //01 порты управления/состояния
    ID_DEV_RTC,                             //02 часы реального времени
    ID_DEV_BATMON,                          //03 монитор АКБ BMV-600S
    ID_DEV_MPPT,                            //04 контроллер заряда Prosolar SunStar MPPT SS-50C
    ID_DEV_PV,                              //05 управление подключением солнечных панелей
    ID_DEV_CHARGER,                         //06 контроллер заряда PB-1000-24
    ID_DEV_INV1,                            //07 инвертор TS-1000-224
    ID_DEV_INV2,                            //08 инвертор TS-3000-224
    ID_DEV_ALT,                             //09 блок АВР (автоматический ввод резерва)
    ID_DEV_GEN,                             //0A контроллер генератора
    ID_DEV_TRC,                             //0B контроллер солнечного трекера
    ID_DEV_SPA,                             //0C положение солнца
    ID_DEV_VOICE,                           //0D голосовой информатор
    ID_DEV_HMI,                             //0E модуль HMI
    ID_DEV_RESERV,                          //0F управление дополнительными выходами
    ID_DEV_EXTOUT,                          //10 управление дополнительными UP/DN/LF/RT
    ID_DEV_MODBUS_REQ,                      //11 обмен данными HMI -> контроллер -> MODBUS
    ID_DEV_MODBUS_ANS,                      //12 обмен данными MODBUS -> контроллер -> HMI 
    ID_CONFIG,                              //13 параметры настроек
    ID_DEV_LOG                              //14 логирование событий
 } Device;
 
//*************************************************************************************************
// Тип варианта подсчета кол-ва параметров уст-ва
//*************************************************************************************************
typedef enum {
    CNT_FULL,                               //расчет для всех параметров уст-ва
    CNT_HMI                                 //расчет только для параметров отображаемых в формах HMI
 } CountType;

//*************************************************************************************************
// Индексы значений параметров портов
//*************************************************************************************************
typedef enum {
    FUSE_24VDC,                             //наличие питания контроллера по цепи +24V
    BAT_CONNECT,                            //состояние автомата подключения АКБ
    STAT_CTRL,                              //наличия питания +12BAT от схемы управления контакторами
    CPU_MODE,                               //состояние переключателей MODE
    PORTS_ALL                               //состояние всех входов
 } ParamPort;

//*************************************************************************************************
// Индексы значений параметров монитора АКБ
//*************************************************************************************************
typedef enum {
    MON_VOLTAGE,                            //напряжение АКБ
    MON_CURRENT,                            //ток АКБ
    MON_CONSUMENERGY,                       //израсходованная энергия от АКБ
    MON_SOC,                                //состояние заряда АКБ
    MON_TTG,                                //время работы до перезарядки
    MON_ALARM,                              //ON/OFF звуковая сигнализации
    MON_RELAY,                              //ON/OFF состояние реле
    MON_ALARMMODE,                          //состояние сигнализации: Low SOC | High Voltage | Low Voltage
    MON_MODEL,                              //модель монитора
    MON_VERSION,                            //версия прошивки
    MON_H1,                                 //глубина самого глубокого разряда
    MON_H2,                                 //глубина последнего разряда
    MON_H3,                                 //глубина среднего разряда
    MON_H4,                                 //число циклов заряда
    MON_H5,                                 //число полных разрядов
    MON_H6,                                 //совокупное значение Ah полученное от АКБ
    MON_H7,                                 //минимальное напряжение АКБ
    MON_H8,                                 //максимальное напряжение АКБ
    MON_H9,                                 //число дней с момента последнего полного заряда
    MON_H10,                                //Кол-во автоматических синхронизаций
    MON_H11,                                //Кол-во аварийных сигналов низкого напряжения
    MON_H12,                                //Кол-во аварийных сигналов высокого напряжения
    MON_LINK                                //соединение установлено
 } ParamBatMon;

//маски состояния сигнализации монитора АКБ
typedef enum {
    ALR_MSK_LOW_VLT = 0x01,                 //низкое напряжение
    ALR_MSK_HG_VLT  = 0x02,                 //высокое напряжение
    ALR_MSK_LOW_SOC = 0x04                  //низкий уровень заряда
 } BatMonAlarm;

//тип возвращаемого значения параметра TTG
typedef enum {
    BATMON_TTG_MIN,                         //минуты
    BATMON_TTG_HOUR                         //часы
 } BatMonTTGTime;

//*************************************************************************************************
// Индексы значений параметров контроллера MPPT
//*************************************************************************************************
typedef enum {
    MPPT_IN_VOLTAGE,                        //напряжение панелей
    MPPT_IN_CURRENT,                        //ток панелей
    MPPT_OUT_VOLTAGE,                       //выходное напряжение
    MPPT_OUT_CURRENT,                       //выходной ток
    MPPT_ENERGY1,                           //собранная энергия сегодня (WHr)
    MPPT_ENERGY2,                           //собранная энергия сегодня (AHr)
    MPPT_TIME_FLOAT,                        //время контроллера в режиме "поддержки" сегодня
    MPPT_CHARGE_MODE,                       //режим зарядки
    MPPT_MPPT_TEMP,                         //температура контроллера
    MPPT_SOC,                               //уровень заряда АКБ
    MPPT_BAT_CURRENT,                       //ток АКБ
    MPPT_BAT_CAPASITY,                      //емкость АКБ
    MPPT_BAT_TEMP,                          //температура АКБ
    MPPT_SERIAL,                            //серийный номер контроллера
    MPPT_TIMECHARGING,                      //счетчик времени заряда
    MPPT_POWER,                             //контроллер включен
    MPPT_CONNECT,                           //кабель связи подключен
    MPPT_PVON,                              //панели подключены/откл к MPPT
    MPPT_PVMODE,                            //режим панелей парал/послед
    MPPT_LINK                               //соединение установлено
 } ParamMppt;

//режимы зарядки MPPT контроллера
typedef enum {
    MPPT_CHARGE_OFF,                        //заряд выключен
    MPPT_MPPT,                              //заряд с MPPT
    MPPT_BULK,                              //быстрый
    MPPT_ABSORP,                            //насыщение
    MPPT_FLOAT,                             //поддержка
    MPPT_CHARGE_START,                      //начало заряда
    MPPT_CHARGE_STOP,                       //остановка заряда
    MPPT_EQUALZ                             //выравнивание
 } MpptCharge;
 
//статус подключения контроллера MPPT
typedef enum {
    MPPT_POWER_OFF,                         //контроллер выкл
    MPPT_POWER_ON                           //контроллер вкл
 } MpptPower;
 
//статус подключения кабеля связи контроллера MPPT
typedef enum {
    MPPT_CONN_OFF,                          //кабель связи контроллера MPPT не подключен
    MPPT_CONN_ON                            //подключен кабель связи контроллера MPPT
 } MpptConn;

//тип запрашиваемых данных по солнечным панелям 
typedef enum {
    PV_PVON,                                //состояние панелей
    PV_PVMODE                               //режим панелей
 } ParamPv;
 
//управление режимами соединения солнечных панелей
typedef enum {
    PV_MODE_PAR,                            //параллельное
    PV_MODE_SER                             //последовательно-параллельное
 } PvMode;

//управление подключением панелей к MPPT
typedef enum {
    PV_CTRL_OFF,                            //выкл
    PV_CTRL_ON                              //вкл
 } PvCtrl;

//статус подключения панелей
typedef enum {
    PV_STAT_OFF,                            //выкл
    PV_STAT_ON                              //вкл
 } PvStatus;

//коды ошибок управления подключением солнечных панелей
typedef enum {
    PV_ERR_OK,                              //функция выполнена
    PV_ERR_NOSIGN,                          //Нет сигнала подтверждения вкл/выкл
    PV_ERR_NOBAT                            //АКБ не подключен
 } PvError;

//*************************************************************************************************
// Индексы значений параметров контроллера заряда PB-1000-24
//*************************************************************************************************
typedef enum {
    CHARGE_CONN_AC,                         //зарядное уст-во подключено к сети
    CHARGE_DEV_STAT,                        //статус уст-ва
    CHARGE_MODE,                            //режим "выкл/2/3/8"
    CHARGE_BANK_STAT,                       //зарядка завершена
    CHARGE_CURRENT                          //ток зарядки
 } ParamCharger;

//режимы зарядки
typedef enum {
    CHARGE_OFF,                             //выключение зарядки
    CHARGE_MODE2,                           //режим зарядки "2"
    CHARGE_MODE3,                           //режим зарядки "3"
    CHARGE_MODE8                            //режим зарядки "8"
 } ChargeMode;

//признак завершения зарядки
typedef enum {
    CHARGE_PROGSS,                          //зарядка выполняется
    CHARGE_FULL                             //зарядка завершена
 } ChargeCompl;

//ошибки
typedef enum {
    CHARGE_ERR_OK,                          //ошибок нет
    CHARGE_ERR_NOAC,                        //нет сети АС
    CHARGE_ERR_NOBAT,                       //АКБ не подключена
    CHARGE_ERR_DEVICE,                      //контроллер зарядки неисправен
    CHARGE_ERR_MODE                         //неверные параметры зарядки
 } ChargeError;

//*************************************************************************************************
// Индексы значений параметров инвертора
//*************************************************************************************************
typedef enum {
    INV_CFG_EQL_VOLT,                       //напряжение выравнивания
    INV_CFG_FLT_VOLT,                       //напряжение поддержания
    INV_CFG_ALARM_VOLT,                     //пониженное напряжение
    INV_CFG_SHDN_VOLT,                      //напряжение выключения
    INV_VENDOR,                             //производитель
    INV_VERSION,                            //версия
    INV_MODEL,                              //модель
    INV_AC_OUT,                             //напряжение на выходе
    INV_AC_POWER,                           //выходная мощность в % (0-25-50-75-100)
    INV_DC_IN,                              //напряжение АКБ
    INV_BAT_PERC,                           //уровень зарядки АКБ % (0-25-50-75-100)
    INV_TEMPERATURE,                        //температура инвертора
    INV_UNUSED,                             //
    INV_AC_FREQ,                            //частота напряжения на выходе
    INV_WORK_TIME,                          //прогнозируемое время работы min
    INV_POWER_PERC,                         //потребляемая мощность на выходе 0-100% 
    INV_POWER_WATT,                         //мощность на выходе W (рассчитывается из power_perc)
    INV_STATUS,                             //биты состояния инвертора
    INV_DC_CONNECT,                         //инвертор подключен к АКБ
    INV_MODE,                               //режим инвертора
    INV_ERROR,                              //ошибки инвертора
    INV_CTRL_ERR                            //ошибки управления инвертором
 } ParamInv;
 
//управление инвертором
typedef enum {
    INV_CTRL_OFF,                           //выключение инвертора
    INV_CTRL_ON                             //включение инвертора
 } InvCtrlCmnd;

//текущее состояние инвертора
typedef enum {
    INV_MODE_NO_LINK,                       //нет связи с инвертором
    INV_MODE_OFF,                           //выключен
    INV_MODE_ON,                            //инвертора включен
    INV_MODE_SAVE,                          //дежурный режим
    INV_MODE_RMT_OFF                        //выключен программно
 } InvStatus;

//коды ошибок инвертора
typedef enum {
    TS_ERR_OK,                              //ошибок нет
    TS_ERR_EEPROM,                          //Ошибка EEPROM
    TS_ERR_BAT,                             //Батарея разряжена
    TS_ERR_BATLOW,                          //Низкий уровень заряда АКБ
    TS_ERR_OVR100,                          //Перегрузка по выходу 100% ~ 115%
    TS_ERR_OVR115,                          //Перегрузка по выходу 115% ~ 150%
    TS_ERR_OVR150,                          //Перегрузка по выходу больше 150%
    TS_ERR_OVRHEAT,                         //Перегрев
    TS_ERR_ERROR                            //Ошибка EEPROM
 } InvDevError;
 
//статус питания инвертора
typedef enum {
    BAT_DC_UNKNOWN,                         //управление контакторами выключено
    BAT_DC_OFF,                             //контактор питания DC выключен
    BAT_DC_ON                               //контактор питания DC включен
 } BatStatus;   

//статус питания инвертора
typedef enum {
    INV_DC_OFF,                             //контактор питания DC выключен
    INV_DC_ON                               //контактор питания DC включен
 } InvDcStatus;   

//шаги циклограммы включения/выключения инверторов
typedef enum {
    INV_STEP_STOP,                          //циклограмма выключена (завершена)
    INV_STEP_CHK_BAT,                       //проверка подключения АКБ
    INV_STEP_CHK_CTRL,                      //проверка управления контакторами
    INV_STEP_CHK_RMT_OFF,                   //проверка статуса "выключен удаленно/программно"
    INV_STEP_WAIT_STAT,                     //ожидание ответа инвертора на команду запроса статуса
    INV_STEP_SOFT_OFF,                      //программное выключение инвертора
    INV_STEP_ON_CONTACTOR,                  //управление контактором
    INV_STEP_OFF_CONTACTOR,                 //выключение контактора
    INV_STEP_CHK_POWER,                     //проверка отсутствие нагрузки на инверторе
    INV_STEP_CHK_CONTACTOR,                 //проверка вкл/выкл контактора
    INV_STEP_READ_CONFIG,                   //запрос чтения конфигурации инвертора
    INV_STEP_READ_STATUS,                   //запрос статуса инвертора
    INV_STEP_CHK_STATUS                     //проверка результата запроса статуса инвертора
 } InvCtrlCycle;

//коды ошибок управления инверторами 
typedef enum {
    INV_ERR_CTRL_OK,                        //ошибки управления нет
    INV_ERR_CTRL_PARAM,                     //параметры вызова функции заданы неправильно
    INV_ERR_CTRL_NOBAT,                     //АКБ не подключена
    INV_ERR_CTRL_POWER,                     //выключать инвертор от АКБ нельзя, есть нагрузка
    INV_ERR_CTRL_NOSIGNAL,                  //нет подтверждения вкл/выкл контактора
    INV_ERR_CTRL_NOCTRL,                    //нет сигнала включения схемы управления контакторами
    INV_ERR_CTRL_ANSWER,                    //нет связи с инвертором
    INV_ERR_CTRL_NO_OFF,                    //нет подтверждения программного выключения инвертора
    INV_ERR_CTRL_POWER_OFF                  //выключена клавиша питания
 } InvCtrlError;

//*************************************************************************************************
// Индексы значений параметров положения солнца (Solar position algorithm)
//*************************************************************************************************
typedef enum {
    SPA_SUNRISE,                            //восход
    SPA_SUNSET,                             //заход
    SPA_TIMEZONE,                           //часовой пояс
    SPA_LONGITUDE,                          //долгота
    SPA_LATITUDE,                           //широта
    SPA_ELEVATION,                          //высота
    SPA_PRESSURE,                           //давление
    SPA_TEMPERATURE,                        //температура
    SPA_SLOPE,                              //наклон поверхности
    SPA_AZM_ROTATION,                       //вращ. поверх. азимута
    SPA_ZENIT,                              //зенитный угол
    SPA_AZIMUT,                             //азимутальный угол
    SPA_DURATION,                           //продолжит. дня
    SPA_SUNRISE1,                           //восход (без час/мин)
    SPA_SUNSET1,                            //заход (без час/мин)
    SPA_DURATION1,                          //продолжит. дня (без час/мин)
    SPA_ZENIT1,                             //зенитный угол (без градусов)
    SPA_AZIMUT1,                            //азимутальный угол (без градусов)
    SPA_ERROR                               //результат проверки исходных данных
 } ParamSunPos;

//ошибки при проверки исходных данных для расчета SPA
typedef enum {
    SPA_ERROR_OK,                           //ошибок нет
    SPA_ERROR_YEAR,                         //ошибка в годе (< -2000 * > 6000)
    SPA_ERROR_MONTH,                        //ошибка в месяце (< 1 * > 12)
    SPA_ERROR_DAY,                          //ошибка в дне (< 1 * > 31)
    SPA_ERROR_HOUR,                         //ошибка в часах (< 0 * > 24)
    SPA_ERROR_MINUTE,                       //ошибка в минутах (< 0 * > 59)
    SPA_ERROR_SECONDS,                      //ошибка в секундах (< 0 * >= 60)
    SPA_ERROR_DELTA_T,                      //ошибка в разнице между временем вращения земли и земным временем (> 8000)
    SPA_ERROR_TIMEZONE,                     //ошибка в часовом поясе (> 18)
    SPA_ERROR_LATITUDE,                     //ошибка в широте (> 90)
    SPA_ERROR_LONGITUDE,                    //ошибка в долготе (> 180)
    SPA_ERROR_ELEVATION,                    //ошибка в высоте наблюдения (< -6500000)
    SPA_ERROR_PRESSURE,                     //ошибка в давлении (< 0 * > 5000)
    SPA_ERROR_TEMPERATURE,                  //ошибка в температуре (<= -273 * > 6000)
    SPA_ERROR_SLOPE,                        //ошибка в наклоне к поверхности (> 360)
    SPA_ERROR_AZM_ROTATION,                 //вращение поверхности (> 360)
    SPA_ERROR_ATMOS_REFRACT,                //ошибка в параметре атмосферной рефракции (> 5)
    SPA_ERROR_DELTA_UT1                     //ошибка в разнице секунд между UTC и UT (<= -1 * >= 1)
 } SpaValid;

//*************************************************************************************************
// Индексы значений параметров солнечного трекера
//*************************************************************************************************
typedef enum {
    TRC_LINK,                               //наличие связи с контроллером
    TRC_POWER,                              //общее питание трекера включено
    TRC_POWER_BREAK,                        //состояние защиты питание трекера
    TRC_ACT,                                //питание реле управления актуаторами включено
    TRC_MODE,                               //режим трекера автомат/ручной/командный/нет связи
    TRC_MODE2,                              //режим трекера автомат/ручной/командный/нет связи (англ)
    TRC_FUSE_OK,                            //предохранитель трекера
    TRC_SENSOR,                             //состояние выходов сенсора
    TRC_VERT,                               //абсолютное положение вертикального актуатора
    TRC_HORZ,                               //абсолютное положение горизонтального актуатора
    TRC_VEEP,                               //сохраненное значение положения верт. актуатора в EEPROM (импульс)
    TRC_HEEP,                               //сохраненное значение положения горз. актуатора в EEPROM (импульс)
    TRC_LIMSW,                              //состояние концевых выключателей актуаторов
    TRC_TIMEON,                             //продолжительность работы контроллера трекера
    TRC_VERT_MM,                            //абсолютное положение вертикального актуатора (мм)
    TRC_HORZ_MM                             //абсолютное положение горизонтального актуатора (мм)
 } ParamTracker;

//тип актуатора
typedef enum {
    TRC_POS_VERTICAL,                       //вертикальный актуатор
    TRC_POS_HORIZONTAL                      //горизонтальный актуатор
 } TrackerAct;

//тип позиционирования
typedef enum {
    TRC_POS_LENGTH,                         //позиционирование в мм штока актуатора
    TRC_POS_DEGREE                          //позиционирование в градусах
 } TrackerPos;

//управление реле питания актуаторов трекера
typedef enum {
    TRC_ACT_OFF,                            //выкл
    TRC_ACT_ON                              //вкл
 } PowerAct;
 
//коды ошибок позиционирования трекера
typedef enum {
    TRC_SUCCESS,                            //OK
    TRC_ERR_VALUE,                          //Ошибка в значении параметров
    TRC_ERR_PARAM,                          //Ошибка в параметрах
    TRC_ERR_SEND                            //Ошибка передачи
 } TrackerPosErr;

//состояние трекера
typedef enum {
    TRC_STAT_NOLINK,                        //нет связи
    TRC_STAT_COMMAND,                       //вкл командный режим
    TRC_STAT_SENSOR,                        //автоматический по сенсору
    TRC_STAT_WIND                           //высокая скорость ветра
 } TrackerStat;

//*************************************************************************************************
// Индексы значений параметров часов
//*************************************************************************************************
typedef enum {
    RTC_DATE,                               //DD.MM.YYYY
    RTC_TIME,                               //HH:MI:SS
    RTC_FULL,                               //DD.MM.YYYY HH:MI:SS
    RTC_FULL_DW                             //DD.MM.YYYY DayOfWeek HH:MI:SS
 } ParamRtc;

//*************************************************************************************************
// Индексы значений параметров генератора
//*************************************************************************************************
typedef enum {
    GEN_PAR_REMOTE,                         //вывод состояния подключения контроллера генератора по MODBUS
    GEN_PAR_CONN,                           //вывод состояния подключения генератора (локально)
    GEN_PAR_MODE,                           //текущий режим генератора
    GEN_PAR_STAT,                           //состояние режимов генератора
    GEN_PAR_TM_RUN,                         //вывод времени работы
    GEN_PAR_TM_END,                         //вывод времени до выключения
    GEN_PAR_START_STOP,                     //вывод времени до запуска/выключения при автоматическом запуске
    GEN_PAR_SLEEP,                          //вывод времени отдыха
    GEN_PAR_AUTO,                           //режим работы автоматики
    GEN_PAR_ALT,                            //контроль напряжения генератора на блоке АВР
    GEN_PAR_ERROR,                          //ошибки генератора
    GEN_PAR_CYCLE1,                         //номер цикла запуска
    GEN_PAR_CYCLE2                          //кол-во циклов запуска
 } ParamGen;

//коды текущего режима работы генератора
typedef enum {
    GEN_MODE_NULL,                          //ничего
    GEN_MODE_START,                         //запуск
    GEN_MODE_RUN,                           //работа
    GEN_MODE_SLEEP,                         //отдых
    GEN_MODE_OFF,                           //выключен
    GEN_MODE_TEST                           //тестирование
 } GenMode;

//коды состояния генератора
typedef enum {
    GEN_STAT_NULL,                          //ничего не выводим
    GEN_STAT_NO_CONN,                       //нет подключения генератора
    GEN_STAT_BAT_LOW,                       //низкий заряд батареи генератора
    GEN_STAT_FUEL_LOW,                      //низкий уровень топлива
    GEN_STAT_OIL_LOW,                       //низкий уровень масла
    GEN_STAT_OVERLOAD,                      //перегрузка инвертора
    GEN_STAT_AUTO_BREAK,                    //автозапуск прерван
    GEN_STAT_GEN_OFF,                       //генератор выключился
    GEN_STAT_MANUAL_BREAK,                  //генератор выключили принудительно
    GEN_STAT_START_BREAK,                   //запуск генератора прерван
    GEN_STAT_STEP_START,                    //попытки запуска
    GEN_STAT_TIME_OUT,                      //время работы истекло
    GEN_STAT_TEST_END,                      //тест завершен
    GEN_STAT_START_ERROR                    //ошибка запуска
 } GenStat;

//коды ошибок генератора
typedef enum {
    GEN_ERR_OK,                             //функция выполнена
    GEN_ERR_NO_CONNECT,                     //генератор не подключен
    GEN_ERR_BATLOW,                         //низкий заряд АКБ генератора
    GEN_ERR_FUEL,                           //низкий уровень топлива
    GEN_ERR_OIL,                            //низкий уровень масла
    GEN_ERR_OVR,                            //перегрузка инвертора генератора
    GEN_ERR_BREAK,                          //генератор выключился, проверьте генератор
    GEN_ERR_START                           //генератор не запустился
 } GenError;

//ручной/автоматический режим запуска при отключении сети
typedef enum {
    GEN_MANUAL,                             //ручной режим
    GEN_AUTO                                //автоматический режим
 } GenAutoMode;

//*************************************************************************************************
// Коды голосовых сообщений
//*************************************************************************************************
typedef enum {
    VOICE_NULL,
    VOICE_INFO,                             //Предварительное сообщение
    VOICE_LOW_CHARGE,                       //Низкий заряд батареи ... %
    VOICE_LEVEL_CHARGE,                     //Уровень заряда батареи %
    VOICE_POWER_INV,                        //Нагрузка инверторов ... % и ... %
    VOICE_TTGO,                             //Продолжительность работы ... часов (... минут)
    VOICE_CHARGE,                           //Плановая подзарядка
    VOICE_BAT_FULL,                         //Батарея заряжена
    VOICE_POWER_AC,                         //Питание нагрузки от основной сети
    VOICE_POWER_TS,                         //Питание нагрузки от инверторов
    VOICE_POWER_GEN,                        //Питание нагрузки от генератора
    VOICE_AC_OFF,                           //Основная сеть отключена
    VOICE_AC_ON,                            //Основная сеть восстановлена
    VOICE_POWER_CTRL,                       //Нет питания контроллера
    VOICE_BAT_NOCONN,                       //Батарея не подключена
    VOICE_CHARGE_END,                       //Подзарядка завершена
    VOICE_GEN_RUN,                          //Генератор запущен
    VOICE_GEN_OFF,                          //Генератор выключен
    VOICE_GEN_DISCON,                       //Генератор отключился
    VOICE_GEN_CHECK,                        //Проверьте генератор
    VOICE_PV_ON,                            //Солнечные панели подключены
    VOICE_PV_OFF,                           //Солнечные панели отключены
    VOICE_TRC_ON,                           //Управление трекером включено
    VOICE_TRC_OFF,                          //Управление трекером выключено
    VOICE_TEST,                             //Плановое тестирование
    VOICE_TS_START,                         //Инверторы будут запущены через ... минут
    VOICE_VOICE                             //Голосовой информатор
 } VoiceId;
 
//*************************************************************************************************
// Индексы значений параметров голосового информатора
//*************************************************************************************************
typedef enum {
    VOICE_PAR_CONN,                         //вывод состояния подключения
    VOICE_PAR_STAT,                         //статус голосового информатора
    VOICE_PAR_VOL                           //уровень громкости
 } ParamVoice;

//*************************************************************************************************
// Коды звуковых сообщений
//*************************************************************************************************
typedef enum {
    SND_NOTHING,
    SND_BATCRT,                             //батарея заряжена
    SND_BATLOW,                             //низкий заряд батареи
    SND_CRTSTP,                             //генератор отключился
    SND_ERROR,                              //генератор выключен
    SND_EXCL,                               //нет питания контроллера
    SND_HDFAIL,                             //солнечные панели подключены
    SND_HDINST,                             //солнечные панели отключены
    SND_HDREM,                              //
    SND_LOGOFF,                             //управление трекером включено
    SND_LOGON,                              //управление трекером выключено
    SND_NOTIFY,                             //генератор запущен
    SND_PRINT,                              //питание нагрузки от генератора
    SND_SHUTDN,                             //основная сеть отключена
    SND_STARTU                              //основная сеть восстановлена
 } SoundId;
 
//*************************************************************************************************
// Индексы значений параметров блока АВР
//*************************************************************************************************
typedef enum {
    ALT_CONN,                               //АВР подключен да/нет
    ALT_MAIN_AC,                            //наличие основной сети да/нет
    ALT_GEN_ON,                             //генератор включен да/нет
    ALT_POWER_SRC,                          //источник питание нагрузки AC/GEN/DC
    ALT_DELAY_TS                            //время до вкл/выкл инверторов
 } ParamAlt;

//значения статуса подключения нагрузки
typedef enum {
    ALT_POWER_UNKN,                         //определить не удалось
    ALT_POWER_AC,                           //нагрузка питается от основной сети
    ALT_POWER_GEN,                          //нагрузка питается от генератора
    ALT_POWER_DC                            //нагрузка питается от инверторов
 } AltPower;

//наличие напряжения переменного тока
typedef enum {
    POWER_AC_OFF,                           //напряжение нет
    POWER_AC_ON                             //напряжения есть
 } PowerAc;

//коды ошибок управления
typedef enum {
    ALT_ERR_OK,                             //функция выполнена
    ALT_ERR_NO_CONN,                        //блок АВР не подключен
    ALT_ERR_NO_INV,                         //инверторы не подключены
    ALT_ERR_NO_AC                           //на блоке АВР нет сети
 } AltError;

//*************************************************************************************************
// Индексы значений параметров обмена по CAN шине с модулем HMI
//*************************************************************************************************
typedef enum {
    HMI_LINK,                              //наличие связи по CAN шине
    HMI_SEND,                              //передано пакетов
    HMI_ERROR_SEND,                        //ошибок передачи
    HMI_ERROR_TX,                          //счетчик ошибок передачи
    HMI_ERROR_RX                           //счетчик ошибок приема
 } ParamHmi;

//*************************************************************************************************
// Индексы дополнительных реле
//*************************************************************************************************
typedef enum {
    RELAY_RES1,                             //дополнительное реле 1
    RELAY_RES2,                             //дополнительное реле 2
    RELAY_RES3,                             //дополнительное реле 3
    RELAY_RES4                              //дополнительное реле 4
 } RelayRes;

//индексы дополнительных выходов управления
typedef enum {
    EXT_OUT_UP,                             //дополнительное выход 1
    EXT_OUT_DN,                             //дополнительное выход 2
    EXT_OUT_LF,                             //дополнительное выход 3
    EXT_OUT_RT                              //дополнительное выход 4
 } RelayOut;

//команды управления реле
typedef enum {
    RELAY_OFF,                              //выключить реле
    RELAY_ON,                               //включить реле
    RELAY_PULSE                             //кратковременное включение реле
 } RelayCmnd;

//константы продолжительность включения реле ms в импульсном режиме
typedef enum {
    RELAY_PULSE1 = 100,
    RELAY_PULSE2 = 200,
    RELAY_PULSE3 = 300,
    RELAY_PULSE4 = 400,
    RELAY_PULSE5 = 500
 } RelayPulseTime;

//*************************************************************************************************
// Режим работы CPU ...
//*************************************************************************************************
typedef enum {
    CPU_MODE0,                              //режим 0 (WDT блокирован)
    CPU_MODE1,                              //режим 1 (WDT включен)
    CPU_MODE2,                              //режим 2 (WDT включен)
    CPU_MODE3                               //режим 3 (WDT включен)
 } CpuMode;

//*************************************************************************************************
// Признак наличия питания
//*************************************************************************************************
typedef enum {
    POWER_OFF,                              //напряжение выкл
    POWER_ON                                //напряжение вкл
 } Power;

//*************************************************************************************************
// Признак наличия защиты
//*************************************************************************************************
typedef enum {
    PROTECT_OFF,                            //напряжение выкл
    PROTECT_WORK                            //напряжение вкл
 } Protect;

//*************************************************************************************************
// Режимы работы системы
//*************************************************************************************************
typedef enum {
    SYSTEM_MODE_TEST,                       //тестовый (ручной)
    SYSTEM_MODE_BACKUP,                     //резервный
    SYSTEM_MODE_MIXED                       //смешанный
 } SystemMode;

//*************************************************************************************************
// Режим работы вкл/выкл (режима, функционала)
//*************************************************************************************************
typedef enum {
    MODE_OFF,                               //выкл
    MODE_ON                                 //вкл
 } Mode;

//*************************************************************************************************
// Тип состояния для Link/Connect
//*************************************************************************************************
typedef enum {
    LINK_CONN_NO,                           //связи нет
    LINK_CONN_OK                            //связь есть
 } LinkConn;

//*************************************************************************************************
// Тип состояния уст-ва
//*************************************************************************************************
typedef enum {
    DEVICE_FAULT,                           //уст-во неисправно
    DEVICE_OK                               //уст-во исправно
 } DevStatus;

//*************************************************************************************************
// Тип состояния выполнения команды
//*************************************************************************************************
typedef enum {
    COMMAND_END,                            //выполнение команды завершено
    COMMAND_EXEC                            //команда выполняется
 } ComndStat;

//*************************************************************************************************
// Коды ответа уст-ва по протоколу MODBUS
//*************************************************************************************************
typedef enum {
    MBUS_ANSWER_OK,                         //Ошибок нет
    //ошибки протокола MODBUS
    MBUS_ERROR_FUNC,                        //Принятый код функции не может быть обработан.
    MBUS_ERROR_ADDR,                        //Адрес данных, указанный в запросе, недоступен.
    MBUS_ERROR_DATA,                        //Значение, содержащееся в поле данных запроса, является недопустимой величиной.
    MBUS_ERROR_DEV,                         //Невосстанавливаемая ошибка имела место, пока ведомое устройство
                                            //пыталось выполнить затребованное действие.
    MBUS_ERROR_ACKWAIT,                     //Ведомое устройство приняло запрос и обрабатывает его, но это требует много времени.
                                            //Этот ответ предохраняет ведущее устройство от генерации ошибки тайм-аута.
    MBUS_ERROR_BUSY,                        //Ведомое устройство занято обработкой команды. Ведущее устройство должно повторить
                                            //сообщение позже, когда ведомое освободится.
    MBUS_ERROR_NOACK,                       //Ведомое устройство не может выполнить программную функцию, заданную в запросе.
                                            //Этот код возвращается для неуспешного программного запроса, использующего
                                            //функции с номерами 13 или 14. Ведущее устройство должно запросить диагностическую
                                            //информацию или информацию об ошибках от ведомого.
    MBUS_ERROR_MEMCRC,                      //Ведомое устройство при чтении расширенной памяти обнаружило ошибку контроля четности.
    //ошибки модуля обмена данными
    MBUS_ERROR_PARAM,                       //ошибки в параметрах вызова функции
    MBUS_ANSWER_CRC,                        //ошибка КС принятого пакета
    MBUS_ANSWER_TIMEOUT,                    //запрос отправлен, ведомое устройство не отвечает.
    MBUS_CONNECT_LOST                       //связь с устройством потеряна
} ModBusError;

// Тип функции
typedef enum {
    MBUS_FUNC_UNKNOW,                       //код функции не определен
    MBUS_REGS_READ,                         //чтение регистров
    MBUS_REG1_WRITE,                        //запись одного регистра
    MBUS_REGS_WRITE                         //запись нескольких регистров
 } ModbusFunc;

// Тип адресации 8/16-битная
typedef enum {
    MBUS_REG_8BIT,                          //8-битная адресации
    MBUS_REG_16BIT,                         //16-битная адресации
    MBUS_REG_OTHER                          //адресации определяется уст-м
 } ModbusAddrReg;

// Валидация кода функции
typedef enum {
    MBUS_FUNC_ERR,                          //указанный код функции не верный
    MBUS_FUNC_OK                            //проверка прошла
 } ModbusFuncValid;

//*************************************************************************************************
// Уровни громкости для голосового информатора
//*************************************************************************************************
typedef enum {
    VOLUME0,                                //уровень громкости 0%
    VOLUME1,                                //уровень громкости 10%
    VOLUME2,                                //уровень громкости 20%
    VOLUME3,                                //уровень громкости 30%
    VOLUME4,                                //уровень громкости 40%
    VOLUME5,                                //уровень громкости 50%
    VOLUME6,                                //уровень громкости 60%
    VOLUME7,                                //уровень громкости 70%
    VOLUME8,                                //уровень громкости 80%
    VOLUME9                                 //уровень громкости 90%
 } Volume;

//*************************************************************************************************
// ID параметров конфигурации управляющего контроллера
//*************************************************************************************************
typedef enum {
    CFG_SCR_FILE,                           //имя файла экрана с макроподстановками
    CFG_JOB_FILE,                           //имя файла загружаемых заданий для планировщика
    CFG_JOB_TEST,                           //имя файла загружаемых заданий для планировщика
    CFG_MODE_SYS,                           //режим работы системы
    CFG_MODE_LOGGING,                       //режим логирования файлов 0/1 - [каталог\файл]/[\каталог\YYYYMM\файл]
    CFG_LAST_CHARGE,                        //дата последнего включения подзарядки от основной сети 
    CFG_LOG_ENABLE_PV,                      //вкл логирование команд управление солнечными панелями
    CFG_LOG_ENABLE_CHARGE,                  //вкл логирование команд зарядного уст-ва
    CFG_LOG_ENABLE_MPPT,                    //вкл логирование команд/данных вкл/выкл солнечных панелей
    CFG_LOG_ENABLE_INV,                     //вкл логирование команд/данных управление инверторов
    CFG_LOG_ENABLE_BMON,                    //вкл логирование данных монитора батареи
    CFG_LOG_ENABLE_GEN,                     //вкл логирование команд генератора
    CFG_LOG_ENABLE_ALT,                     //вкл логирование команд блока АВР
    CFG_LOG_ENABLE_TRC,                     //вкл логирование команд трекера
    CFG_DATLOG_UPD_CHARGE,                  //период записи данных зарядного уст-ва
    CFG_DATLOG_UPD_MPPT,                    //период записи данных солнечного контроллера заряда
    CFG_DATLOG_UPD_BMON,                    //период записи данных монитора батареи
    CFG_DATLOG_UPD_INV,                     //период записи данных инверторов
    CFG_DATLOG_UPD_TRC,                     //период записи данных трекера
    CFG_GEN_DELAY_START,                    //задержка запуска генератора после отключения основной сети (сек)
    CFG_GEN_DELAY_STOP,                     //задержка выключения генератора после восстановления основной сети (сек)
    CFG_GEN_DELAY_CHK_RUN,                  //ожидание сигнала запуска генератора (сек)
    CFG_GEN_BEFORE_START,                   //пауза между запусками (сек) фактическое время = delay_check_run + before_start
    CFG_GEN_CNT_START,                      //кол-во попыток запуска генератора (макс - 8)
    CFG_GEN_TIME_START,                     //продолжительность запуска для каждой попытки (макс - 8)
    CFG_GEN_TIME_RUN,                       //#21600 максимальная продолжительность работы генератора (сек)
    CFG_GEN_TIME_SLEEP,                     //#7200 продолжительность паузы между длительными работами (сек)
    CFG_GEN_TIME_TEST,                      //#600 продолжительность тестирования генератора (сек)
    CFG_GEN_AUTO_MODE,                      //ручной/автоматический режим запуска при отключении сети
    CFG_GEN_LAST_RUN,                       //дата последного включения генератора
    CFG_SPA_TIMEZONE,                       //часовой пояс
    CFG_SPA_LATITUDE,                       //Широта наблюдателя
    CFG_SPA_LONGITUDE,                      //Долгота наблюдателя
    CFG_SPA_ELEVATION,                      //Высота наблюдателя
    CFG_SPA_PRESSURE,                       //Среднегодовое местное давление
    CFG_SPA_TEMPERATURE,                    //Среднегодовая местная температура
    CFG_SPA_SLOPE,                          //Наклон поверхности (измеряется от горизонтальной плоскости)
    CFG_SPA_AZM_ROTATION,                   //Вращение поверхности азимут (измеряется с юга на проекции нормали
    CFG_PB_CURRENT_STOP,                    //минимальный ток при котором происходит выключение зарядки от PB-1000-224
    CFG_DELAY_START_INV,                    //таймер задержки вкл инверторов при отключении основной сети
    CFG_DELAY_STOP_INV                      //таймер задержки выкл инверторов после восстановлении основной сети
 } ConfigParam;

#endif
